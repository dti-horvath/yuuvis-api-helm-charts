apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{.Values.yuuvis.labels.app}}
    name: index
  name: index
spec:
  replicas: {{.Values.yuuvis.services.index.instances}}
  selector:
    matchLabels:
      name: index
  template:
    metadata:
      labels:
        name: index
    spec:
      {{- if or .Values.yuuvis.services.index.nodeAffinity .Values.yuuvis.services.index.podAffinity .Values.yuuvis.services.index.podAntiAffinity }}
      affinity:
        {{- with .Values.yuuvis.services.index.nodeAffinity }}
        nodeAffinity: {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.yuuvis.services.index.podAffinity }}
        podAffinity: {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.yuuvis.services.index.podAntiAffinity }}
        podAntiAffinity: {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- end }}
      initContainers:
      - name: init-index
        image: "{{.Values.yuuvis.image.dockerRegistry}}/{{.Values.initContainer.image}}:{{.Values.initContainer.tag}}"
        imagePullPolicy: {{.Values.initContainer.imagePullPolicy}}
        command: ["sh", "-c", "{{.Values.initContainer.command}}"]
        {{- if .Values.initContainer.securityContext }}
        securityContext:
        {{- toYaml .Values.initContainer.securityContext | nindent 10 }}
      containers:
      - name: index
        image: "{{.Values.yuuvis.image.dockerRegistry}}/{{.Values.yuuvis.services.index.dockerImage}}:{{ .Values.yuuvis.services.index.tag }}"
        imagePullPolicy: {{ .Values.yuuvis.image.imagePullPolicy }}
        {{- if .Values.yuuvis.livenessProbe.enable }}
        livenessProbe:
          httpGet:
            path: {{.Values.yuuvis.livenessProbe.path}}
            port: {{.Values.yuuvis.services.index.port}}
          initialDelaySeconds: {{.Values.yuuvis.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{.Values.yuuvis.livenessProbe.periodSeconds }}
          timeoutSeconds: {{.Values.yuuvis.livenessProbe.timeoutSeconds }}
        {{- end}}
        {{- if .Values.yuuvis.readinessProbe.enable }}
        readinessProbe:
          httpGet:
            path: {{.Values.yuuvis.readinessProbe.path}}
            port: {{.Values.yuuvis.services.index.port}}
          initialDelaySeconds: {{.Values.yuuvis.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{.Values.yuuvis.readinessProbe.periodSeconds }}
          timeoutSeconds: {{.Values.yuuvis.readinessProbe.timeoutSeconds }}
        {{- end}}
        {{- if .Values.yuuvis.services.index.resources }}
        resources: {{- toYaml .Values.yuuvis.services.index.resources | nindent 10 }}
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp
        env:
        - name: JAVA_OPTS
          value: {{.Values.yuuvis.services.index.java.maxHeap}}
        - name: SPRING_PROFILES_ACTIVE
          value: {{.Values.yuuvis.services.index.profiles}}
        - name: SPRING_CLOUD_CONFIG_URI
          valueFrom:
            configMapKeyRef:
              name: yuuvis-common-env
              key: CONFIGSERVICEURL
      restartPolicy: Always
      automountServiceAccountToken: false
      {{- with .Values.yuuvis.services.index.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.yuuvis.services.index.priorityClassName }}
      priorityClassName: {{ .Values.yuuvis.services.index.priorityClassName }}
      {{- end }}
      {{- with .Values.yuuvis.services.index.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      imagePullSecrets:
      - name: {{ .Values.yuuvis.image.imagePullSecret }}
      securityContext:
        fsGroup: {{.Values.yuuvis.securityContext.fsGroup}}
        runAsGroup: {{.Values.yuuvis.securityContext.runAsGroup}}
        runAsUser: {{.Values.yuuvis.securityContext.runAsUser}}
        runAsNonRoot: {{.Values.yuuvis.securityContext.runAsNonRoot}}
        seccompProfile:
          type: RuntimeDefault
      volumes:
      - emptyDir: {}
        name: tmp