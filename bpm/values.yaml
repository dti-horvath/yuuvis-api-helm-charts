yuuvis:
  image:
    imagePullPolicy: Always
    imagePullSecret: yuuvisorg
    dockerRegistry: docker.yuuvis.org
  configservice:
    url: http://system/config
  livenessProbe:
    enable: false
    initialDelaySeconds: 300
    periodSeconds: 30
    timeoutSeconds: 10
  readinessProbe:
    enable: true
    initialDelaySeconds: 0
    periodSeconds: 30
    timeoutSeconds: 5
  securityContext:
    fsGroup: 1000
    runAsGroup: 1000
    runAsUser: 1000
    runAsNonRoot: true
  bpm:
    engine:
      dockerImage: yuuvis/bpm-engine:0.16.0
      initContainerImage: yuuvis/helper/init-helper:2023-12-03
      profiles: dbspostgres,swagger,oauth2
      instances: 1
      pdb:
        # pdb requires instances > 1 and minAvailable < instances,
        # otherwise draining nodes will deadlock! 
        enabled: false

        # set `minAvailable: null` if you want to use maxUnavailable instead
        minAvailable: 1
      nodeSelector: {}
      priorityClassName: ""
      tolerations: []
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
      java:
        maxHeap: -Xmx128m
        cpu:
      resources:
        requests:
          memory: "512Mi"
        #  cpu:
        #limits:
        #  memory:
        #  cpu: 
      spring:
        datasource:
          hikari:
            minimumIdle: 10
            maximumPoolSize: 100
      database:
        # user and password used by the bpm service to access the desired database
        name: themis
        user: bpmusr
        password: changeme
        port: "5432"
        address: postgresql.infrastructure
        createdb: true
        # for postgres systems the database an optional init job can be used to create 
        # the database
        # if createdb is 'true' 
        # the following user is used to test if the database and user exists
        # and if they dont exit, to create the database, the user and
        # grand the user privileges for the database
        # the privilege user must have the rights to create databases, users
        # and grand privileges to users
        privilege:
          user: postgres
          password: changeme
       
initContainer:
  command: "until wget -q --spider http://system/manage/health; do echo waiting for configservice; sleep 11; done;"
